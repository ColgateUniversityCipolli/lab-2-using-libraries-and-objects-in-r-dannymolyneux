name = str_sub(track, start = 1, end = length(track)-6) #tracks filename without the .wav
location = paste('"', album, track, '"', sep = "/") #album subdirectory/trackname
split = str_split(name, "-") #splits the name between the dashes
track.name = split[[1]][length(split[[1]])] #takes just the track name
artist = split[[1]][length(split[[1]])-1] #artist name for that track
album.split = str_split(album, "/")  #splits the album subdirectory between forward slashes
just.album = album.split[[1]][length(album.split[[1]])] #takes just the album name
output = paste(artist, "-", just.album, "-", track.name, ".json", sep = "") #desired output
result = cat(paste('streaming_extractor_music.exe "', track.name, '.wav" "', output, '"', sep = ""))
#code.to.process =
#print(name)
#print(location)
#print(split)
#print(track.name)
#print(artist)
print(output)
print(result)
}
}
result = paste('streaming_extractor_music.exe "', track.name, '.wav" "', output, '"', sep = "")
cat(result)
#code.to.process =
#print(name)
#print(location)
#print(split)
print(track.name)
#code.to.process =
#print(name)
#print(location)
#print(split)
print(track.name)
#print(album.sub)
print(code.to.process)
code.to.process = c() #code to process vector
for(album in album.sub) { #loop through albums
tracks = list.files(album) #list of tracks for that album
for(track in tracks){ #loop through the tracks in this album
name = str_sub(track, start = 1, end = length(track)-6) #tracks filename without the .wav
location = paste('"', album, track, '"', sep = "/") #album subdirectory/trackname
split = str_split(name, "-") #splits the name between the dashes
track.name = split[[1]][length(split[[1]])] #takes just the track name
artist = split[[1]][length(split[[1]])-1] #artist name for that track
album.split = str_split(album, "/")  #splits the album subdirectory between forward slashes
just.album = album.split[[1]][length(album.split[[1]])] #takes just the album name
output = paste(artist, "-", just.album, "-", track.name, ".json", sep = "") #desired output
result = paste('streaming_extractor_music.exe "', track.name, '.wav" "', output, '"', sep = "")
code.to.process = append(code.to.process, result)
#print(name)
#print(location)
#print(split)
#print(track.name)
#print(artist)
#print(output)
#print(result)
}
}
#print(album.sub)
print(code.to.process)
#Step 4
writeLines(code.to.process)
print(batfile.txt)
#Step 4
batfile.txt = writeLines(code.to.process)
writeLines(code.to.process, filecon)
filecon = file("batfile.txt")
writeLines(code.to.process, filecon)
filecon = file("batfile.txt")
batfile.txt = writeLines(code.to.process, filecon)
writeLines(code.to.process, "batfile.txt")
#Step 4
writeLines(code.to.process, "batfile.txt")
print("batfile.txt")
print(batfile.txt)
?writeLines()
#Step 0
install.packages("jsonlite")
#Step 1
list.dirs("lab-2-using-libraries-and-objects-in-r-dannymolyneux")
#Step 1
print(list.dirs("lab-2-using-libraries-and-objects-in-r-dannymolyneux"))
#Step 0
#install.packages("jsonlite")
library(jsonlite)
#Step 1
print(list.dirs("lab-2-using-libraries-and-objects-in-r-dannymolyneux"))
#Step 1
print(list.files("lab-2-using-libraries-and-objects-in-r-dannymolyneux"))
?list.files
#Step 1
print(list.files())
track.artist = file.split[[1]][[length(file.split)]]
file.split = str_split(file, "-")
file.split = str_split(file, "-")
json.files = c()
for (file in list.files()) {
if (str_count(file, pattern = ".json") > 0){
file.split = str_split(file, "-")
track.artist = file.split[[1]][length(file.split)]
json.files = append(json.files, file)
}
}
json.files = c()
for (file in list.files()) {
if (str_count(file, pattern = ".json") > 0){
file.split = str_split(file, "-")
track.artist = file.split[[1]][length(file.split)]
print(track.artist)
json.files = append(json.files, file)
}
}
json.files = c()
for (file in list.files()) {
if (str_count(file, pattern = ".json") > 0){
file.split = str_split(file, "-")
track.artist = file.split[[1]][length(file.split)]
print(track.artist)
track.album = file.split[[1]][length(file.split)-1]
track.name = file.split[[1]][length(file.split)-2]
print(track.album)
print(track.name)
json.files = append(json.files, file)
}
}
json.files = c()
for (file in list.files()) {
if (str_count(file, pattern = ".json") > 0){
file.split = str_split(file, "-")
track.artist = file.split[[1]][length(file.split)]
print(track.artist)
track.album = file.split[[1]][length(file.split)-1]
track.name = file.split[[1]][length(file.split)-2]
just.name = str_sub(track.name, start = 1, end = length(track.name)-4)
print(track.album)
print(just.name)
}
}
json.files = c()
for (file in list.files()) {
if (str_count(file, pattern = ".json") > 0){
file.split = str_split(file, "-")
track.artist = file.split[[1]][length(file.split)]
print(track.artist)
track.album = file.split[[1]][length(file.split)-1]
track.name = file.split[[1]][length(file.split)-2]
just.name = str_sub(track.name, start = 1, end = length(track.name)-8)
print(track.album)
print(just.name)
}
}
json.files = c()
for (file in list.files()) {
if (str_count(file, pattern = ".json") > 0){
file.split = str_split(file, "-")
track.artist = file.split[[1]][length(file.split)]
print(track.artist)
track.album = file.split[[1]][length(file.split)-1]
track.name = file.split[[1]][length(file.split)-2]
just.name = str_sub(track.name, start = 1, end = length(track.name)-8)
print(track.album)
print(just.name)
}
}
#json.files = c()
for (file in list.files()) {
if (str_count(file, pattern = ".json") > 0){
file.split = str_split(file, "-")
track.artist = file.split[[1]][length(file.split)]
print(track.artist)
track.album = file.split[[1]][length(file.split)-1]
track.name = file.split[[1]][length(file.split)-2]
just.name = str_sub(track.name, start = 1, end = length(track.name)-8)
print(track.album)
print(just.name)
}
}
#json.files = c()
for (file in list.files()) {
if (str_count(file, pattern = ".json") > 0){
file.split = str_split(file, "-")
track.name = file.split[[1]][length(file.split[[1]])-2]
track.album = file.split[[1]][length(file.split[[1]])-1]
track.artist = file.split[[1]][length(file.split[[1]])]
just.track = str_sub(track.name, start = 1, end = length(track.name)-8)
print(track.artist)
print(track.album)
print(just.name)
}
}
#json.files = c()
for (file in list.files()) {
if (str_count(file, pattern = ".json") > 0){
file.split = str_split(file, "-")
track.name = file.split[[1]][length(file.split[[1]])]
track.album = file.split[[1]][length(file.split[[1]])-1]
track.artist = file.split[[1]][length(file.split[[1]])-2]
just.track = str_sub(track.name, start = 1, end = length(track.name)-8)
print(track.artist)
print(track.album)
print(just.name)
}
}
#json.files = c()
for (file in list.files()) {
if (str_count(file, pattern = ".json") > 0){
file.split = str_split(file, "-")
track.name = file.split[[1]][length(file.split[[1]])]
track.album = file.split[[1]][length(file.split[[1]])-1]
track.artist = file.split[[1]][length(file.split[[1]])-2]
just.track = str_sub(track.name, start = 1, end = length(track.name)-8)
print(track.artist)
print(track.album)
print(just.track)
}
}
#json.files = c()
for (file in list.files()) {
if (str_count(file, pattern = ".json") > 0){
file.split = str_split(file, "-")
track.name = file.split[[1]][length(file.split[[1]])]
track.album = file.split[[1]][length(file.split[[1]])-1]
track.artist = file.split[[1]][length(file.split[[1]])-2]
just.track = str_sub(track.name, start = 1, end = length(track.name)-7)
print(track.artist)
print(track.album)
print(just.track)
}
}
setwd("~/Documents/GitHub/lab-2-using-libraries-and-objects-in-r-dannymolyneux")
# Task 1
#install.packages("stringr")
library(stringr)
# Step 1
list.dirs("Musicr")  #lists all subdirectories of Musicr
# Step 2
str_count("MUSICR/PeopleStuff", pattern = "/")
sub.directories = c(list.dirs("Musicr")) #puts subdirectories into a vector
album.sub = c() #empty vector for the subset of album subdirectories
for(direc in sub.directories){
if (str_count(direc, pattern = "/") == 2) {  #if there are two forward slashes in the directory, it is an album
album.sub = append(album.sub, direc) #add the album to the new vector
}
}
#print(album.sub)
# Step 3
files = c()  #empty vector for all .wav files
for(sub in album.sub){ #loop through albums
sub.files = list.files(sub) #list of files for each album
if(sum(str_count(sub.files, pattern = "wav")) > 0) { #if a .wav file, add it to files vector
files = append(files, sub.files)
}
}
#print(files)
code.to.process = c() #code to process vector
for(album in album.sub) { #loop through albums
tracks = list.files(album) #list of tracks for that album
for(track in tracks){ #loop through the tracks in this album
name = str_sub(track, start = 1, end = length(track)-6) #tracks filename without the .wav
location = paste('"', album, track, '"', sep = "/") #album subdirectory/trackname
split = str_split(name, "-") #splits the name between the dashes
track.name = split[[1]][length(split[[1]])] #takes just the track name
artist = split[[1]][length(split[[1]])-1] #artist name for that track
album.split = str_split(album, "/")  #splits the album subdirectory between forward slashes
just.album = album.split[[1]][length(album.split[[1]])] #takes just the album name
output = paste(artist, "-", just.album, "-", track.name, ".json", sep = "") #desired output
result = paste('streaming_extractor_music.exe "', track.name, '.wav" "', output, '"', sep = "")
code.to.process = append(code.to.process, result)
#print(name)
#print(location)
#print(split)
#print(track.name)
#print(artist)
#print(output)
#print(result)
}
}
#print(album.sub)
print(code.to.process)
#step 4
writeLines(code.to.process, "batfile.txt")
#Task 2
#Step 0
#install.packages("jsonlite")
library(jsonlite)
#Step 1
print(list.files())
#json.files = c()
for (file in list.files()) {
if (str_count(file, pattern = ".json") > 0){
file.split = str_split(file, "-")
track.name = file.split[[1]][length(file.split[[1]])]
track.album = file.split[[1]][length(file.split[[1]])-1]
track.artist = file.split[[1]][length(file.split[[1]])-2]
just.track = str_sub(track.name, start = 1, end = length(track.name)-7)
print(track.artist)
print(track.album)
print(just.track)
}
}
print(list.files())
#json.files = c()
for (file in list.files()) {
if (str_count(file, pattern = ".json") > 0){
file.split = str_split(file, "-")
track.name = file.split[[1]][length(file.split[[1]])]
track.album = file.split[[1]][length(file.split[[1]])-1]
track.artist = file.split[[1]][length(file.split[[1]])-2]
just.track = str_sub(track.name, start = 1, end = length(track.name)-7)
print(track.artist)
print(track.album)
print(just.track)
}
}
print(list.files())
#json.files = c()
for (file in list.files()) {
if (str_count(file, pattern = ".json") > 0){
file.split = str_split(file, "-")
track.name = file.split[[1]][length(file.split[[1]])]
track.album = file.split[[1]][length(file.split[[1]])-1]
track.artist = file.split[[1]][length(file.split[[1]])-2]
just.track = str_sub(track.name, start = 1, end = length(track.name)-7)
print(track.artist)
print(track.album)
print(just.track)
}
}
print(list.files())
#json.files = c()
for (file in list.files()) {
if (str_count(file, pattern = ".json") > 0){
file.split = str_split(file, "-")
track.name = file.split[[1]][length(file.split[[1]])]
track.album = file.split[[1]][length(file.split[[1]])-1]
track.artist = file.split[[1]][length(file.split[[1]])-2]
just.track = str_sub(track.name, start = 1, end = length(track.name)-7)
print(track.artist)
print(track.album)
print(just.track)
}
}
print(list.files())
#json.files = c()
for (file in list.files()) {
if (str_count(file, pattern = ".json") > 0){
file.split = str_split(file, "-")
track.name = file.split[[1]][length(file.split[[1]])]
track.album = file.split[[1]][length(file.split[[1]])-1]
track.artist = file.split[[1]][length(file.split[[1]])-2]
just.track = str_sub(track.name, start = 1, end = length(track.name)-7)
print(track.artist)
print(track.album)
print(just.track)
}
}
print(list.files())
#json.files = c()
for (file in list.files()) {
if (str_count(file, pattern = ".json") > 0){
file.split = str_split(file, "-")
track.name = file.split[[1]][length(file.split[[1]])]
track.album = file.split[[1]][length(file.split[[1]])-1]
track.artist = file.split[[1]][length(file.split[[1]])-2]
just.track = str_sub(track.name, start = 1, end = length(track.name)-7)
print(track.artist)
print(track.album)
print(just.track)
}
}
print(list.files())
#json.files = c()
for (file in list.files()) {
if (str_count(file, pattern = ".json") > 0){
file.split = str_split(file, "-")
track.name = file.split[[1]][length(file.split[[1]])]
track.album = file.split[[1]][length(file.split[[1]])-1]
track.artist = file.split[[1]][length(file.split[[1]])-2]
just.track = str_sub(track.name, start = 1, end = length(track.name)-7)
print(track.artist)
print(track.album)
print(just.track)
}
}
fromJSON()?
#Step 2
fromJSON(The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios))
setwd("~/Documents/GitHub/lab-2-using-libraries-and-objects-in-r-dannymolyneux")
#install.packages("stringr")
library(stringr)
# Step 1
list.dirs("Musicr")  #lists all subdirectories of Musicr
# Step 2
str_count("MUSICR/PeopleStuff", pattern = "/")
sub.directories = c(list.dirs("Musicr")) #puts subdirectories into a vector
album.sub = c() #empty vector for the subset of album subdirectories
for(direc in sub.directories){
if (str_count(direc, pattern = "/") == 2) {  #if there are two forward slashes in the directory, it is an album
album.sub = append(album.sub, direc) #add the album to the new vector
}
}
#print(album.sub)
# Step 3
files = c()  #empty vector for all .wav files
for(sub in album.sub){ #loop through albums
sub.files = list.files(sub) #list of files for each album
if(sum(str_count(sub.files, pattern = "wav")) > 0) { #if a .wav file, add it to files vector
files = append(files, sub.files)
}
}
#print(files)
code.to.process = c() #code to process vector
for(album in album.sub) { #loop through albums
tracks = list.files(album) #list of tracks for that album
for(track in tracks){ #loop through the tracks in this album
name = str_sub(track, start = 1, end = length(track)-6) #tracks filename without the .wav
location = paste('"', album, track, '"', sep = "/") #album subdirectory/trackname
split = str_split(name, "-") #splits the name between the dashes
track.name = split[[1]][length(split[[1]])] #takes just the track name
artist = split[[1]][length(split[[1]])-1] #artist name for that track
album.split = str_split(album, "/")  #splits the album subdirectory between forward slashes
just.album = album.split[[1]][length(album.split[[1]])] #takes just the album name
output = paste(artist, "-", just.album, "-", track.name, ".json", sep = "") #desired output
result = paste('streaming_extractor_music.exe "', track.name, '.wav" "', output, '"', sep = "")
code.to.process = append(code.to.process, result)
#print(name)
#print(location)
#print(split)
#print(track.name)
#print(artist)
#print(output)
#print(result)
}
}
#print(album.sub)
print(code.to.process)
#step 4
writeLines(code.to.process, "batfile.txt")
#Task 2
#Step 0
#install.packages("jsonlite")
library(jsonlite)
#Step 1
print(list.files())
#json.files = c()
for (file in list.files()) {
if (str_count(file, pattern = ".json") > 0){
file.split = str_split(file, "-")
track.name = file.split[[1]][length(file.split[[1]])]
track.album = file.split[[1]][length(file.split[[1]])-1]
track.artist = file.split[[1]][length(file.split[[1]])-2]
just.track = str_sub(track.name, start = 1, end = length(track.name)-7)
print(track.artist)
print(track.album)
print(just.track)
}
}
#Step 2
fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios)")
#Step 2
fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json")
#Step 2
fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json")
#Step 2
json.r = fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json")
#Step 2
json.r = fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json")
#Step 2
json.r = fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json")
#Step 2
fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json")
#Step 2
fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios)")
#Step 2
fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json")
#Step 2
fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json")
print(json.r)
which()?
which(json.r = "loudness")
which(json.r == "loudness")
which(json.r == "loudness")
which(json.r == "lowlevel")
which(json.r == "1.18")
which(json.r == 1.18)
which(json.r == "0.06538313 0.06979199 0.10071161 0.11483224 0.10808654 0.09418701 0.09432784 0.08768948 0.07218419")
average_loudness()?
which(json.r = "tonal")
which(json.r = "tonal")
json.r = fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json")
print(json.r)
which(json.r = "tonal")
json.r = fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json")
print(json.r)
which(json.r == "tonal")
json.r[2]
which(json.r == "tonal")
json.r[2]
json.r[2]
print(json.r[2])
print(json.r[2])
print(json.r[[2]])
which(json.r == "tonal")
print(json.r[[2]])
print(json.r[[2]])
print(json.r[[2]])
print(json.r[[2]])
print(json.r[[1]])
print(json.r[[2]])
print(json.r[[1]])
print(json.r[[3]])
type(json.r)
length(json.r)
print(json.r[[4]])
